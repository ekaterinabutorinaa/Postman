{
	"info": {
		"_postman_id": "16b0e6d9-1d32-4c21-baeb-f7a880d492da",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13504078"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"check string\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"\r",
							"pm.test(\"check name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Kate\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"pm.test(\"check age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"27\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							"pm.test(\"check salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(2000);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"\r",
							"let req = (request.data)\r",
							"console.log(req)\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"check name 2\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"check age 2\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"check salary 2\", function () {\r",
							"    pm.expect(+(jsonData.salary)).to.eql(+(req.salary));\r",
							"});\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"let family = jsonData.family\r",
							"console.log(family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"let u_salary_1_5_year = jsonData.family.u_salary_1_5_year\r",
							"let sumSalary = jsonData.salary * 4\r",
							"console.log(u_salary_1_5_year)\r",
							"console.log(sumSalary)\r",
							"\r",
							"pm.test(\"u_salary_1_5_year\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(sumSalary);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Kate",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"let  jsonData = pm.response.json();\r",
							"console.log(jsonData)\r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"let query = {}; pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});\r",
							"console.log(query)\r",
							"\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let res_name = jsonData.name\r",
							"let req_name = query.name\r",
							"console.log(res_name)\r",
							"console.log(req_name)\r",
							"\r",
							"pm.test(\"check name\", function () {\r",
							"    pm.expect(res_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"let res_age = jsonData.age\r",
							"let req_age = query.age\r",
							"\r",
							"pm.test(\"check age\", function () {\r",
							"    pm.expect(res_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"let res_salary = jsonData.salary\r",
							"let req_salary = query.salary\r",
							"\r",
							"pm.test(\"check salary\", function () {\r",
							"    pm.expect(+(res_salary)).to.eql(+(req_salary));\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"\r",
							"let family = jsonData.family\r",
							"console.log(family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"let Dog = jsonData.family.pets.dog\r",
							"console.log(Dog)\r",
							"\r",
							"pm.test(\"dog_has_item_name\", function () {\r",
							"    pm.expect(Dog).to.have.property('name');\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test(\"dog_has_item_age\", function () {\r",
							"    pm.expect(Dog).to.have.property('age');\r",
							"});\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"name_is_Luky\", function () {\r",
							"    pm.expect(Dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test(\"age_is_4\", function () {\r",
							"    pm.expect(Dog.age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Artur&age=38&salary=5000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Artur"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"console.log(jsonData)\r",
							"\r",
							"// 4. Спарсить request\r",
							"\r",
							"let query = {}; pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});\r",
							"console.log(query)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"let resp_name = jsonData.name\r",
							"let req_name = query.name\r",
							"\r",
							"pm.test(\"check name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"let resp_age = jsonData.age\r",
							"let req_age = query.age\r",
							"// let a = typeof(req_age)\r",
							"// console.log(a)\r",
							"\r",
							"pm.test(\"check age\", function () {\r",
							"    pm.expect(String(resp_age)).to.eql(String(req_age));\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"\r",
							"let item_salary_req = query.salary\r",
							"console.log(item_salary_req)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"\r",
							"let item_salary_resp = jsonData.salary\r",
							"console.log(item_salary_resp)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"let element0_salary_resp = jsonData.salary[0]\r",
							"console.log(element0_salary_resp)\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary из response.\r",
							"\r",
							"let element1_salary_resp = jsonData.salary[1]\r",
							"console.log(element1_salary_resp)\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"let element2_salary_resp = jsonData.salary[2]\r",
							"console.log(element2_salary_resp)\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"let element0_salary_req = query.salary\r",
							"console.log(element0_salary_req)\r",
							"\r",
							"pm.test(\"element0_salary\", function () {\r",
							"    pm.expect(String(element0_salary_resp)).to.eql(String(element0_salary_req));\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"let typeofsalary = Number(jsonData.salary[0])\r",
							"// console.log(typeof(typeofsalary))\r",
							"let salary_1 = typeofsalary * 2\r",
							"// console.log(salary_1)\r",
							"\r",
							"pm.test(\"element1_salary\", function () {\r",
							"    pm.expect(+(element1_salary_resp)).to.eql(+(salary_1));\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"let salary_2 = jsonData.salary[0] * 3\r",
							"console.log(salary_2)\r",
							"\r",
							"pm.test(\"element2_salary\", function () {\r",
							"    pm.expect(+(element2_salary_resp)).to.eql(+(salary_2));\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// execute in Enviroments\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"\r",
							"let user_name = jsonData.name\r",
							"pm.environment.set(\"name\", user_name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"\r",
							"let user_age = jsonData.age\r",
							"pm.environment.set(\"age\", user_age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"\r",
							"let user_salary = jsonData.salary[0]\r",
							"pm.environment.set(\"salary\", user_salary);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"// let numSalary = jsonData.salary.length\r",
							"// console.log(numSalary)\r",
							"\r",
							"for (let i = 0; i < jsonData.salary.length; i++) {\r",
							"    console.log(jsonData.salary[i])\r",
							"};\r",
							"\r",
							"//  или цикл в таком виде\r",
							"// for (const salary of jsonData.salary){\r",
							"//     console.log(salary);\r",
							"// }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Kristina&age=23&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Kristina"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"console.log(jsonData)\r",
							"\r",
							"// 7. Спарсить request.\r",
							"// let query = {}; pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});\r",
							"// console.log(query)\r",
							"\r",
							"let req = (request.data)\r",
							"console.log(req)\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"// let check_start_qa_salary = jsonData.start_qa_salary\r",
							"// console.log(check_start_qa_salary)\r",
							"pm.test(\"check start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"pm.test(\"check qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"check qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"check qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test(\"check qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"\r",
							"pm.test(\"check person\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"check salary\", function () {\r",
							"    pm.expect(+(jsonData.start_qa_salary)).to.eql(+(req.salary));\r",
							"});\r",
							"\r",
							"// console.log(req.salary)\r",
							"// console.log(jsonData.start_qa_salary)\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"check salary*2\", function () {\r",
							"    pm.expect(+(jsonData.qa_salary_after_6_months)).to.eql(+(req.salary * 2));\r",
							"});\r",
							"\r",
							"// console.log(jsonData.qa_salary_after_6_months)\r",
							"// console.log(req.salary * 2)\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"// let salaryMultiply2point7 = req.salary * 2.7\r",
							"\r",
							"pm.test(\"check salary*2.7\", function () {\r",
							"    pm.expect(+(jsonData.qa_salary_after_12_months)).to.eql(+(req.salary * 2.7));\r",
							"});\r",
							"\r",
							"// console.log(jsonData.qa_salary_after_12_months)\r",
							"// console.log(req.salary * 2.7)\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"// обратись к параметру объекта через object['property'] ибо точка это оператор, а не просто символ\r",
							"pm.test(\"check salary*3.3\", function () {\r",
							"    pm.expect(+(jsonData['qa_salary_after_1.5_year'])).to.eql(+(req.salary * 3.3));\r",
							"});\r",
							"\r",
							"// console.log(jsonData['qa_salary_after_1.5_year'])\r",
							"// console.log(req.salary * 3.3)\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"check salary*3.8\", function () {\r",
							"    pm.expect(+(jsonData['qa_salary_after_3.5_years'])).to.eql(+(req.salary * 3.8));\r",
							"});\r",
							"\r",
							"// console.log(jsonData['qa_salary_after_3.5_years'])\r",
							"// console.log(req.salary * 3.8)\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"check u_name[1]\", function () {\r",
							"    pm.expect(+(jsonData.person.u_name[1])).to.eql(+(req.salary));\r",
							"});\r",
							"\r",
							"// console.log(jsonData.person.u_name[1])\r",
							"// console.log(req.salary)\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"check u_age\", function () {\r",
							"    pm.expect(+(jsonData.person.u_age)).to.eql(+(req.age));\r",
							"});\r",
							"\r",
							"// console.log(jsonData.person.u_age)\r",
							"// console.log(req.age)\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"\r",
							"pm.test(\"check u_salary_5_years\", function () {\r",
							"    pm.expect(+(jsonData.person.u_salary_5_years)).to.eql(+(req.salary * 4.2));\r",
							"});\r",
							"\r",
							"// console.log(jsonData.person.u_salary_5_years)\r",
							"// console.log(req.salary * 4.2)\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"const pers = jsonData.person\r",
							"\r",
							"for (prop in pers) {\r",
							"    console.log(prop)\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}